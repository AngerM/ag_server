plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.31'
    id "org.jetbrains.dokka" version "1.5.31"
    id "org.jmailen.kotlinter" version "3.7.0"
    id "com.github.ben-manes.versions" version "0.39.0"
    id 'maven-publish'
}

allprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: "org.jetbrains.dokka"
    apply plugin: "org.jmailen.kotlinter"
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    sourceCompatibility = 11
    targetCompatibility = 11
    group = 'dev.angerm.ag_server'
    version= "0.1.12-SNAPSHOT"

    dependencies {
        implementation platform('org.jetbrains.kotlin:kotlin-bom')
        api 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        api 'org.jetbrains.kotlin:kotlin-reflect'
        [ 'kotlinx-coroutines-core',
          'kotlinx-coroutines-reactor',
          'kotlinx-coroutines-jdk8',
          'kotlinx-coroutines-slf4j',
        ].each {
            api "org.jetbrains.kotlinx:${it}:1.5.2"
        }


        api platform("com.linecorp.armeria:armeria-bom:1.13.2")
        ['armeria',
         'armeria-kotlin',
         'armeria-logback',
         'armeria-retrofit2',
         'armeria-rxjava3',
        ].each {
            api "com.linecorp.armeria:${it}"
        }
        api 'io.github.microutils:kotlin-logging-jvm:2.0.11'
        api 'com.uchuhimo:konf:1.1.2'

        ['simpleclient',
         'simpleclient_hotspot',
         'simpleclient_httpserver',
        ].each {
            api "io.prometheus:${it}:0.12.0"
        }

        api "com.google.inject:guice:5.0.1"

        testImplementation 'org.jetbrains.kotlin:kotlin-test'
        testImplementation(platform('org.junit:junit-bom:5.8.1'))
        testImplementation('org.junit.jupiter:junit-jupiter')

        dokkaHtmlPlugin "org.jetbrains.dokka:kotlin-as-java-plugin:1.5.31"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += '-parameters'
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "11"
        }
    }

    test {
        useJUnitPlatform()
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        repositories {
            maven {
                def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = ossrhUsername
                    password = ossrhPassword
                }
            }
        }
        publications {
            agLibrary(MavenPublication) {
                from components.java
                pom {
                    name = 'AG Server'
                    description = 'A combination of Armeria+Guice'
                    url = 'https://github.com/AngerM/ag_server'
                    licenses {
                        license {
                            name = 'APACHE LICENSE, VERSION 2.0'
                            url = 'https://github.com/AngerM/ag_server/blob/main/LICENSE'
                        }
                    }
                    developers {
                        developer {
                            id = 'AngerM'
                            name = 'Matt Anger'
                            email = 'matt@angerm.dev'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/AngerM/ag_server.git'
                        developerConnection = 'scm:git:https://github.com/AngerM/ag_server.git'
                        url = 'https://github.com/AngerM/ag_server'
                    }
                }
            }
        }
    }
    tasks.withType(Sign) {
        onlyIf { isReleaseVersion }
    }

    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign configurations.archives
        sign publishing.publications.agLibrary
    }
}

def isNonStable = { String version ->
  def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
  def regex = /^[0-9,.v-]+(-r)?$/
  return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

check {
    dependsOn "installKotlinterPrePushHook"
}
